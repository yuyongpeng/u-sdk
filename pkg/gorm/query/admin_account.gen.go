// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"u-sdk/pkg/gorm/model"
)

func newAdminAccount(db *gorm.DB, opts ...gen.DOOption) adminAccount {
	_adminAccount := adminAccount{}

	_adminAccount.adminAccountDo.UseDB(db, opts...)
	_adminAccount.adminAccountDo.UseModel(&model.AdminAccount{})

	tableName := _adminAccount.adminAccountDo.TableName()
	_adminAccount.ALL = field.NewAsterisk(tableName)
	_adminAccount.AccountID = field.NewUint32(tableName, "account_id")
	_adminAccount.AccountName = field.NewString(tableName, "account_name")
	_adminAccount.PwdExpirein = field.NewUint32(tableName, "pwd_expirein")
	_adminAccount.RoleID = field.NewUint32(tableName, "role_id")
	_adminAccount.RoleNameCn = field.NewString(tableName, "role_name_cn")
	_adminAccount.RoleNameEn = field.NewString(tableName, "role_name_en")
	_adminAccount.GroupID = field.NewUint32(tableName, "group_id")
	_adminAccount.GroupName = field.NewString(tableName, "group_name")
	_adminAccount.RealName = field.NewString(tableName, "real_name")
	_adminAccount.Avatar = field.NewString(tableName, "avatar")
	_adminAccount.Mobile = field.NewString(tableName, "mobile")
	_adminAccount.EmailYyp = field.NewString(tableName, "email")
	_adminAccount.Remarks = field.NewString(tableName, "remarks")
	_adminAccount.BindIP = field.NewString(tableName, "bind_ip")
	_adminAccount.BindMac = field.NewString(tableName, "bind_mac")
	_adminAccount.OperatorID = field.NewUint32(tableName, "operator_id")
	_adminAccount.OperatorName = field.NewString(tableName, "operator_name")
	_adminAccount.ModifyTime = field.NewUint32(tableName, "modify_time")
	_adminAccount.CreateTime = field.NewUint32(tableName, "create_time")
	_adminAccount.LastLoginTime = field.NewUint32(tableName, "last_login_time")
	_adminAccount.LastLoginIP = field.NewString(tableName, "last_login_ip")
	_adminAccount.LastLoginMac = field.NewString(tableName, "last_login_mac")
	_adminAccount.InitState = field.NewUint16(tableName, "init_state")
	_adminAccount.IsSystemAdmin = field.NewUint16(tableName, "is_system_admin")
	_adminAccount.Status = field.NewUint16(tableName, "status")

	_adminAccount.Roles = adminAccountHasOneRoles{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Roles", "model.AdminRole"),
	}

	_adminAccount.fillFieldMap()

	return _adminAccount
}

// adminAccount 运营管理后台登录账号信息表
type adminAccount struct {
	adminAccountDo

	ALL           field.Asterisk
	AccountID     field.Uint32
	AccountName   field.String // 登录用户名
	PwdExpirein   field.Uint32 // 密码过期时间
	RoleID        field.Uint32 // 角色ID
	RoleNameCn    field.String // 角色中文名称
	RoleNameEn    field.String // 角色英文名称
	GroupID       field.Uint32 // 分组ID
	GroupName     field.String // 分组名称
	RealName      field.String // 真实姓名
	Avatar        field.String // 头像文件名
	Mobile        field.String
	EmailYyp      field.String // 这个是自定义的email注释信息
	Remarks       field.String
	BindIP        field.String // 绑定IP地址
	BindMac       field.String // 绑定Mac地址
	OperatorID    field.Uint32 // 最后修改人ID
	OperatorName  field.String // 最后修改人姓名
	ModifyTime    field.Uint32 // 最后修改时间
	CreateTime    field.Uint32 // 创建时间
	LastLoginTime field.Uint32 // 最后登录时间
	LastLoginIP   field.String // 最后登录IP
	LastLoginMac  field.String // 最后登录电脑MAC地址
	InitState     field.Uint16 // 初始状态：1-系统初始用户；2-非系统初始用户
	IsSystemAdmin field.Uint16 // 是否为系统管理员：1-是；2-否
	Status        field.Uint16 // 状态：0-删除；1-正常；2-锁定

	Roles adminAccountHasOneRoles

	fieldMap map[string]field.Expr
}

func (a adminAccount) Table(newTableName string) *adminAccount {
	a.adminAccountDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a adminAccount) As(alias string) *adminAccount {
	a.adminAccountDo.DO = *(a.adminAccountDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *adminAccount) updateTableName(table string) *adminAccount {
	a.ALL = field.NewAsterisk(table)
	a.AccountID = field.NewUint32(table, "account_id")
	a.AccountName = field.NewString(table, "account_name")
	a.PwdExpirein = field.NewUint32(table, "pwd_expirein")
	a.RoleID = field.NewUint32(table, "role_id")
	a.RoleNameCn = field.NewString(table, "role_name_cn")
	a.RoleNameEn = field.NewString(table, "role_name_en")
	a.GroupID = field.NewUint32(table, "group_id")
	a.GroupName = field.NewString(table, "group_name")
	a.RealName = field.NewString(table, "real_name")
	a.Avatar = field.NewString(table, "avatar")
	a.Mobile = field.NewString(table, "mobile")
	a.EmailYyp = field.NewString(table, "email")
	a.Remarks = field.NewString(table, "remarks")
	a.BindIP = field.NewString(table, "bind_ip")
	a.BindMac = field.NewString(table, "bind_mac")
	a.OperatorID = field.NewUint32(table, "operator_id")
	a.OperatorName = field.NewString(table, "operator_name")
	a.ModifyTime = field.NewUint32(table, "modify_time")
	a.CreateTime = field.NewUint32(table, "create_time")
	a.LastLoginTime = field.NewUint32(table, "last_login_time")
	a.LastLoginIP = field.NewString(table, "last_login_ip")
	a.LastLoginMac = field.NewString(table, "last_login_mac")
	a.InitState = field.NewUint16(table, "init_state")
	a.IsSystemAdmin = field.NewUint16(table, "is_system_admin")
	a.Status = field.NewUint16(table, "status")

	a.fillFieldMap()

	return a
}

func (a *adminAccount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *adminAccount) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 27)
	a.fieldMap["account_id"] = a.AccountID
	a.fieldMap["account_name"] = a.AccountName
	a.fieldMap["pwd_expirein"] = a.PwdExpirein
	a.fieldMap["role_id"] = a.RoleID
	a.fieldMap["role_name_cn"] = a.RoleNameCn
	a.fieldMap["role_name_en"] = a.RoleNameEn
	a.fieldMap["group_id"] = a.GroupID
	a.fieldMap["group_name"] = a.GroupName
	a.fieldMap["real_name"] = a.RealName
	a.fieldMap["avatar"] = a.Avatar
	a.fieldMap["mobile"] = a.Mobile
	a.fieldMap["email"] = a.EmailYyp
	a.fieldMap["remarks"] = a.Remarks
	a.fieldMap["bind_ip"] = a.BindIP
	a.fieldMap["bind_mac"] = a.BindMac
	a.fieldMap["operator_id"] = a.OperatorID
	a.fieldMap["operator_name"] = a.OperatorName
	a.fieldMap["modify_time"] = a.ModifyTime
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["last_login_time"] = a.LastLoginTime
	a.fieldMap["last_login_ip"] = a.LastLoginIP
	a.fieldMap["last_login_mac"] = a.LastLoginMac
	a.fieldMap["init_state"] = a.InitState
	a.fieldMap["is_system_admin"] = a.IsSystemAdmin
	a.fieldMap["status"] = a.Status

}

func (a adminAccount) clone(db *gorm.DB) adminAccount {
	a.adminAccountDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a adminAccount) replaceDB(db *gorm.DB) adminAccount {
	a.adminAccountDo.ReplaceDB(db)
	return a
}

type adminAccountHasOneRoles struct {
	db *gorm.DB

	field.RelationField
}

func (a adminAccountHasOneRoles) Where(conds ...field.Expr) *adminAccountHasOneRoles {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a adminAccountHasOneRoles) WithContext(ctx context.Context) *adminAccountHasOneRoles {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a adminAccountHasOneRoles) Session(session *gorm.Session) *adminAccountHasOneRoles {
	a.db = a.db.Session(session)
	return &a
}

func (a adminAccountHasOneRoles) Model(m *model.AdminAccount) *adminAccountHasOneRolesTx {
	return &adminAccountHasOneRolesTx{a.db.Model(m).Association(a.Name())}
}

type adminAccountHasOneRolesTx struct{ tx *gorm.Association }

func (a adminAccountHasOneRolesTx) Find() (result *model.AdminRole, err error) {
	return result, a.tx.Find(&result)
}

func (a adminAccountHasOneRolesTx) Append(values ...*model.AdminRole) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a adminAccountHasOneRolesTx) Replace(values ...*model.AdminRole) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a adminAccountHasOneRolesTx) Delete(values ...*model.AdminRole) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a adminAccountHasOneRolesTx) Clear() error {
	return a.tx.Clear()
}

func (a adminAccountHasOneRolesTx) Count() int64 {
	return a.tx.Count()
}

type adminAccountDo struct{ gen.DO }

type IAdminAccountDo interface {
	gen.SubQuery
	Debug() IAdminAccountDo
	WithContext(ctx context.Context) IAdminAccountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAdminAccountDo
	WriteDB() IAdminAccountDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAdminAccountDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAdminAccountDo
	Not(conds ...gen.Condition) IAdminAccountDo
	Or(conds ...gen.Condition) IAdminAccountDo
	Select(conds ...field.Expr) IAdminAccountDo
	Where(conds ...gen.Condition) IAdminAccountDo
	Order(conds ...field.Expr) IAdminAccountDo
	Distinct(cols ...field.Expr) IAdminAccountDo
	Omit(cols ...field.Expr) IAdminAccountDo
	Join(table schema.Tabler, on ...field.Expr) IAdminAccountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAdminAccountDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAdminAccountDo
	Group(cols ...field.Expr) IAdminAccountDo
	Having(conds ...gen.Condition) IAdminAccountDo
	Limit(limit int) IAdminAccountDo
	Offset(offset int) IAdminAccountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminAccountDo
	Unscoped() IAdminAccountDo
	Create(values ...*model.AdminAccount) error
	CreateInBatches(values []*model.AdminAccount, batchSize int) error
	Save(values ...*model.AdminAccount) error
	First() (*model.AdminAccount, error)
	Take() (*model.AdminAccount, error)
	Last() (*model.AdminAccount, error)
	Find() ([]*model.AdminAccount, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminAccount, err error)
	FindInBatches(result *[]*model.AdminAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AdminAccount) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAdminAccountDo
	Assign(attrs ...field.AssignExpr) IAdminAccountDo
	Joins(fields ...field.RelationField) IAdminAccountDo
	Preload(fields ...field.RelationField) IAdminAccountDo
	FirstOrInit() (*model.AdminAccount, error)
	FirstOrCreate() (*model.AdminAccount, error)
	FindByPage(offset int, limit int) (result []*model.AdminAccount, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAdminAccountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a adminAccountDo) Debug() IAdminAccountDo {
	return a.withDO(a.DO.Debug())
}

func (a adminAccountDo) WithContext(ctx context.Context) IAdminAccountDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a adminAccountDo) ReadDB() IAdminAccountDo {
	return a.Clauses(dbresolver.Read)
}

func (a adminAccountDo) WriteDB() IAdminAccountDo {
	return a.Clauses(dbresolver.Write)
}

func (a adminAccountDo) Session(config *gorm.Session) IAdminAccountDo {
	return a.withDO(a.DO.Session(config))
}

func (a adminAccountDo) Clauses(conds ...clause.Expression) IAdminAccountDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a adminAccountDo) Returning(value interface{}, columns ...string) IAdminAccountDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a adminAccountDo) Not(conds ...gen.Condition) IAdminAccountDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a adminAccountDo) Or(conds ...gen.Condition) IAdminAccountDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a adminAccountDo) Select(conds ...field.Expr) IAdminAccountDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a adminAccountDo) Where(conds ...gen.Condition) IAdminAccountDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a adminAccountDo) Order(conds ...field.Expr) IAdminAccountDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a adminAccountDo) Distinct(cols ...field.Expr) IAdminAccountDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a adminAccountDo) Omit(cols ...field.Expr) IAdminAccountDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a adminAccountDo) Join(table schema.Tabler, on ...field.Expr) IAdminAccountDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a adminAccountDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAdminAccountDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a adminAccountDo) RightJoin(table schema.Tabler, on ...field.Expr) IAdminAccountDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a adminAccountDo) Group(cols ...field.Expr) IAdminAccountDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a adminAccountDo) Having(conds ...gen.Condition) IAdminAccountDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a adminAccountDo) Limit(limit int) IAdminAccountDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a adminAccountDo) Offset(offset int) IAdminAccountDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a adminAccountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminAccountDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a adminAccountDo) Unscoped() IAdminAccountDo {
	return a.withDO(a.DO.Unscoped())
}

func (a adminAccountDo) Create(values ...*model.AdminAccount) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a adminAccountDo) CreateInBatches(values []*model.AdminAccount, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a adminAccountDo) Save(values ...*model.AdminAccount) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a adminAccountDo) First() (*model.AdminAccount, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminAccount), nil
	}
}

func (a adminAccountDo) Take() (*model.AdminAccount, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminAccount), nil
	}
}

func (a adminAccountDo) Last() (*model.AdminAccount, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminAccount), nil
	}
}

func (a adminAccountDo) Find() ([]*model.AdminAccount, error) {
	result, err := a.DO.Find()
	return result.([]*model.AdminAccount), err
}

func (a adminAccountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminAccount, err error) {
	buf := make([]*model.AdminAccount, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a adminAccountDo) FindInBatches(result *[]*model.AdminAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a adminAccountDo) Attrs(attrs ...field.AssignExpr) IAdminAccountDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a adminAccountDo) Assign(attrs ...field.AssignExpr) IAdminAccountDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a adminAccountDo) Joins(fields ...field.RelationField) IAdminAccountDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a adminAccountDo) Preload(fields ...field.RelationField) IAdminAccountDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a adminAccountDo) FirstOrInit() (*model.AdminAccount, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminAccount), nil
	}
}

func (a adminAccountDo) FirstOrCreate() (*model.AdminAccount, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminAccount), nil
	}
}

func (a adminAccountDo) FindByPage(offset int, limit int) (result []*model.AdminAccount, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a adminAccountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a adminAccountDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a adminAccountDo) Delete(models ...*model.AdminAccount) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *adminAccountDo) withDO(do gen.Dao) *adminAccountDo {
	a.DO = *do.(*gen.DO)
	return a
}
